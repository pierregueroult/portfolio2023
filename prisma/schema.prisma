// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // name of the project (e.g. "Konbinul")
  name String
  // concatenated name of the project (e.g. "konbinul")
  concatenatedName String @unique
  // date of creation of the project (e.g. "2020-10-10")
  createdAt DateTime @default(now())
  // used to class the project (e.g. "web")
  type String
  // description of the project in a few lines
  description String
  // history of the project in a few paragraphs
  contentHistory String?
  // list of the images of the project (url list)
  contentImages String[]
  // banner for the project page (url)
  banner String
  // illustration for the project page (url)
  illustration String
  // keywords of the project (e.g. ["SAE104", "vidéo", "web"])
  keywords String[]
  // link to the documentation of the project (url)
  documentation String
  // link to the results of the project (url) (e.g. "https://youtube.com/..." or website link)
  asset String?
  // all contributors of the project (foreign table)
  workers Worker[]
  // boolean to know if the project is visible or not
  visible Boolean @default(false)
  // color of the project (e.g. "#FF0000")
  color String @default("4169e1")
}

model Worker {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // foreign reference to the project
  Project Project @relation(fields: [projectId], references: [id])
  // foreign key to the project
  projectId String @db.ObjectId
  // description of the actions of the worker in the project in a few lines
  description String
  // role of the worker in the project (e.g. "Développeur")
  role String
  // all data of the worker (foreign table)
  data WorkerData @relation(fields: [dataId], references: [id])
  // foreign key to the data of the worker
  dataId String @db.ObjectId
}

model WorkerData {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // foreign reference to the worker 
  // name of the worker (e.g. "Alexandre B.")
  name String
  // image or illustration of the worker (url)
  image String?
  // link to the worker's website (url)
  link String

  workers Worker[]
}

model Logos {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // name of the brand / project (e.g. "Konbinul")
  name String
  // image
  mainImage String
  // images of the brand / project (url list)
  images Json[]
  // description of the brand / project in a few words
  description String
  // creation date of the brand / project (e.g. "2020-10-10")
  createdAt DateTime @default(now())
  // keywords of the brand / project (e.g. ["SAE104", "vidéo", "web"])
  keywords String[]
  // background color of the logo (e.g. "#FF0000")
  color String
}

model Skills {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // name of the skill (e.g. "Python")
  name String @unique
  // icon of the skill (url)
  icon String
  // category of the skill (e.g. "Langage de programmation")
  category String
  // dominant color of the icon (e.g. "#FF0000")
  color String
}

model Jobs {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // name of the job (e.g. "Développeur")
  name String @unique
  // company of the job (e.g. "Konbinul")
  company String
  // date of beginning of the job (e.g. "2020-10-10")
  beginAt DateTime
  // date of end of the job (e.g. "2020-10-10")
  endAt DateTime?
  // link to the job's website (url)
  link String
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // name of the sender (e.g. "Alexandre B.")
  name String
  // email of the sender (e.g. "Alexandre.B@...")
  email String
  // message of the sender
  message String
}